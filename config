currentDeployment: "default"
deploymentConfigurations:
- name: "default"
  version: "1.28.4"
  providers:
    appengine:
      enabled: false
      accounts: []
    aws:
      enabled: false
      accounts: []
      bakeryDefaults:
        baseImages: []
      defaultKeyPairTemplate: "{{name}}-keypair"
      defaultRegions: []
      defaults:
        iamRole: "BaseIAMRole"
    ecs:
      enabled: false
      accounts: []
    azure:
      enabled: false
      accounts: []
      bakeryDefaults:
        templateFile: "azure-linux.json"
        baseImages: []
    dcos:
      enabled: false
      accounts: []
      clusters: []
    dockerRegistry:
      enabled: true
      accounts:
      - name: "dockerhub"
        requiredGroupMembership: []
        permissions: {}
        address: "https://index.docker.io"
        email: "fake.email@spinnaker.io"
        cacheIntervalSeconds: 30
        clientTimeoutMillis: 60000
        cacheThreads: 1
        paginateSize: 100
        sortTagsByDate: false
        trackDigests: false
        insecureRegistry: false
        repositories:
        - "library/alpine"
        - "library/ubuntu"
        - "library/centos"
        - "library/nginx"
      - name: "jfrog-docker"
        requiredGroupMembership: []
        permissions: {}
        address: "https://opsmx.jfrog.io/"
        username: "anooptej"
        password: "OpsMx@123"
        email: "fake.email@spinnaker.io"
        cacheIntervalSeconds: 30
        clientTimeoutMillis: 60000
        cacheThreads: 1
        paginateSize: 100
        sortTagsByDate: false
        trackDigests: false
        insecureRegistry: false
        repositories:
        - "restapp/simpleapp"
      - name: "dockerhub-registry"
        requiredGroupMembership: []
        providerVersion: "V1"
        permissions: {}
        address: "https://index.docker.io"
        username: "opsmx11"
        password: "Network123!"
        email: "fake.email@spinnaker.io"
        cacheIntervalSeconds: 30
        clientTimeoutMillis: 60000
        cacheThreads: 1
        paginateSize: 100
        sortTagsByDate: false
        trackDigests: false
        insecureRegistry: false
        repositories:
        - "opsmx11/terraspin"
        - "opsmx11/restapp"
      primaryAccount: "dockerhub"
    google:
      enabled: false
      accounts: []
      bakeryDefaults:
        templateFile: "gce.json"
        baseImages: []
        zone: "us-central1-f"
        network: "default"
        useInternalIp: false
    huaweicloud:
      enabled: false
      accounts: []
      bakeryDefaults:
        baseImages: []
    kubernetes:
      enabled: true
      accounts:
      - name: "default"
        requiredGroupMembership: []
        permissions: {}
        dockerRegistries:
        - accountName: "dockerhub"
          namespaces: []
        providerVersion: "V2"
        context: "default"
        configureImagePullSecrets: true
        serviceAccount: true
        cacheThreads: 1
        namespaces: []
        omitNamespaces:
        - "kube-system"
        - "kube-public"
        kinds: []
        omitKinds: []
        customResources: []
        cachingPolicies: []
        oAuthScopes: []
        onlySpinnakerManaged: true
      primaryAccount: "default"
    tencentcloud:
      enabled: false
      accounts: []
      bakeryDefaults:
        baseImages: []
    oracle:
      enabled: false
      accounts: []
      bakeryDefaults:
        templateFile: "oci.json"
        baseImages: []
    cloudfoundry:
      enabled: false
      accounts: []
  deploymentEnvironment:
    size: "SMALL"
    type: "Distributed"
    accountName: "default"
    imageVariant: "SLIM"
    updateVersions: true
    consul:
      enabled: false
    vault:
      enabled: false
    location: "oes"
    customSizing:
      front50:
        requests:
          memory: "650Mi"
          cpu: "500m"
      echo-scheduler:
        requests:
          cpu: "300m"
          memory: "128Mi"
      echo-worker:
        requests:
          cpu: "300m"
          memory: "128Mi"
      clouddriver:
        requests:
          cpu: "500m"
          memory: "512Mi"
      clouddriver-caching:
        requests:
          cpu: "500m"
          memory: "512Mi"
      clouddriver-ro-deck:
        requests:
          cpu: "500m"
          memory: "512Mi"
      clouddriver-ro:
        requests:
          cpu: "500m"
          memory: "512Mi"
      clouddriver-rw:
        requests:
          cpu: "500m"
          memory: "512Mi"
      deck:
        requests:
          memory: "64Mi"
          cpu: "50m"
      gate:
        requests:
          memory: "650Mi"
          cpu: "300m"
      igor:
        requests:
          memory: "650Mi"
          cpu: "100m"
      rosco:
        requests:
          memory: "1000Mi"
          cpu: "100m"
      echo:
        requests:
          memory: "512Mi"
          cpu: "100m"
      orca:
        requests:
          memory: "1000Mi"
          cpu: "500m"
      monitoring-daemon:
        requests:
          memory: "70Mi"
          cpu: "100m"
    sidecars:
      spin-clouddriver-caching:
      - name: "k8s-config-sync"
        dockerImage: "quay.io/opsmxpublic/ubi8-spin-clouddriver:tag-version-8.0.4-apl-shard-all-fix-dockertag-cli"
        command:
        - "sh"
        - "-c"
        args:
        - "while true; do sh /tmp/script/k8config-sync.sh; sleep 60s; done"
        configMapVolumeMounts:
        - configMapName: "k8config-sync"
          mountPath: "/tmp/script"
        mountPath: "/opsmx"
        secretVolumeMounts:
        - secretName: "opsmx-gitops-auth"
          mountPath: "/tmp/secret"
      spin-clouddriver-ro:
      - name: "k8s-config-sync"
        dockerImage: "quay.io/opsmxpublic/ubi8-spin-clouddriver:tag-version-8.0.4-apl-shard-all-fix-dockertag-cli"
        command:
        - "sh"
        - "-c"
        args:
        - "while true; do sh /tmp/script/k8config-sync.sh; sleep 60s; done"
        configMapVolumeMounts:
        - configMapName: "k8config-sync"
          mountPath: "/tmp/script"
        mountPath: "/opsmx"
        secretVolumeMounts:
        - secretName: "opsmx-gitops-auth"
          mountPath: "/tmp/secret"
      spin-clouddriver-ro-deck:
      - name: "k8s-config-sync"
        dockerImage: "quay.io/opsmxpublic/ubi8-spin-clouddriver:tag-version-8.0.4-apl-shard-all-fix-dockertag-cli"
        command:
        - "sh"
        - "-c"
        args:
        - "while true; do sh /tmp/script/k8config-sync.sh; sleep 60s; done"
        configMapVolumeMounts:
        - configMapName: "k8config-sync"
          mountPath: "/tmp/script"
        mountPath: "/opsmx"
        secretVolumeMounts:
        - secretName: "opsmx-gitops-auth"
          mountPath: "/tmp/secret"
      spin-clouddriver-rw:
      - name: "k8s-config-sync"
        dockerImage: "quay.io/opsmxpublic/ubi8-spin-clouddriver:tag-version-8.0.4-apl-shard-all-fix-dockertag-cli"
        command:
        - "sh"
        - "-c"
        args:
        - "while true; do sh /tmp/script/k8config-sync.sh; sleep 60s; done"
        configMapVolumeMounts:
        - configMapName: "k8config-sync"
          mountPath: "/tmp/script"
        mountPath: "/opsmx"
        secretVolumeMounts:
        - secretName: "opsmx-gitops-auth"
          mountPath: "/tmp/secret"
    initContainers: {}
    hostAliases: {}
    affinity: {}
    tolerations: {}
    nodeSelectors: {}
    gitConfig:
      upstreamUser: "spinnaker"
    livenessProbeConfig:
      enabled: false
    haServices:
      clouddriver:
        enabled: true
        disableClouddriverRoDeck: false
      echo:
        enabled: true
  persistentStorage:
    persistentStoreType: "s3"
    azs: {}
    gcs:
      rootFolder: "front50"
    redis: {}
    s3:
      bucket: "spinnaker"
      rootFolder: "front50"
      pathStyleAccess: true
      endpoint: "http://oes-minio:9000"
      accessKeyId: "spinnakeradmin"
      secretAccessKey: "spinnakeradmin"
    oracle: {}
  features:
    chaos: false
    pipelineTemplates: true
    artifacts: true
    managedPipelineTemplatesV2UI: true
  metricStores:
    datadog:
      enabled: false
      tags: []
    prometheus:
      enabled: false
      push_gateway: "https://prom.wurm.opsmx.net"
      add_source_metalabels: true
    stackdriver:
      enabled: false
    newrelic:
      enabled: false
      tags: []
    period: 30
    enabled: false
  notifications:
    slack:
      enabled: false
    twilio:
      enabled: false
      baseUrl: "https://api.twilio.com/"
    github-status:
      enabled: false
  timezone: "America/Los_Angeles"
  ci:
    jenkins:
      enabled: true
      masters:
      - name: "my-jenkins"
        permissions: {}
        address: "https://jenkins.opsmx.net:8181/jenkins"
        username: "{cipher}f566d5b1e31433fdfea5a3a2ed13e51305e3e51f1bee592bbec3009369fa2fd9"
        password: "{cipher}66a7ef1ca583e21d7e75e34d3e2b74bab2b29703ddca3f2628c276109bc560af9ce0e4c9fa17bdf44e32411ce68301f857d9f9ddd6d6b183337bf8b1db98d09f"
        csrf: true
    travis:
      enabled: false
      masters: []
    wercker:
      enabled: false
      masters: []
    concourse:
      enabled: false
      masters: []
    gcb:
      enabled: false
      accounts: []
    codebuild:
      enabled: false
      accounts: []
  repository:
    artifactory:
      enabled: false
      searches: []
  security:
    apiSecurity:
      ssl:
        enabled: false
      overrideBaseUrl: "https://oesgate.wurm.opsmx.net"
    uiSecurity:
      ssl:
        enabled: false
      overrideBaseUrl: "https://spindeck.wurm.opsmx.net"
    authn:
      oauth2:
        enabled: false
        client: {}
        resource: {}
        userInfoMapping: {}
      saml:
        enabled: "true"
        keyStore: "encryptedFile:oessamljks:oessaml.jks"
        keyStoreAliasName: "saml"
        keyStorePassword: "encrypted:samljks-password:password"
        metadataLocal: "encryptedFile:spinnakermetadataxml:spinnakermetadata.xml"
        issuerId: "spingate"
        serviceAddress: "https://spindeck.wurm.opsmx.net"
        userAttributeMapping: {}
      ldap:
        enabled: "false"
        url: "ldap://oes-openldap:389/dc=example,dc=org"
        userDnPattern: "cn={0}"
      x509:
        enabled: false
      iap:
        enabled: false
      enabled: true
    authz:
      groupMembership:
        service: "EXTERNAL"
        google:
          roleProviderType: "GOOGLE"
        github:
          roleProviderType: "GITHUB"
        file:
          roleProviderType: "FILE"
        ldap:
          roleProviderType: "LDAP"
      enabled: "true"
  artifacts:
    bitbucket:
      enabled: true
      accounts: []
    gcs:
      enabled: false
      accounts: []
    oracle:
      enabled: false
      accounts: []
    github:
      enabled: false
      accounts: []
    gitlab:
      enabled: false
      accounts: []
    gitrepo:
      enabled: false
      accounts: []
    http:
      enabled: false
      accounts: []
    helm:
      enabled: false
      accounts:
      - name: "jfrogaccount"
        repository: "https://opsmx.jfrog.io/artifactory/samplehelm"
        username: "anooptej"
        password: "OpsMx@123"
      - name: "opsmx-oes-helm-repo"
        repository: "https://helmcharts.opsmx.com"
      - name: "ngnix-ingress"
        repository: " https://kubernetes.github.io/ingress-nginx"
      - name: "cert-manager"
        repository: "https://charts.jetstack.io"
    s3:
      enabled: false
      accounts: []
    maven:
      enabled: false
      accounts: []
    templates: []
  pubsub:
    enabled: false
    google:
      enabled: false
      pubsubType: "GOOGLE"
      subscriptions: []
      publishers: []
  canary:
    enabled: false
    serviceIntegrations:
    - name: "google"
      enabled: false
      accounts: []
      gcsEnabled: false
      stackdriverEnabled: false
    - name: "prometheus"
      enabled: false
      accounts: []
    - name: "datadog"
      enabled: false
      accounts: []
    - name: "signalfx"
      enabled: false
      accounts: []
    - name: "aws"
      enabled: false
      accounts: []
      s3Enabled: false
    - name: "newrelic"
      enabled: false
      accounts: []
    reduxLoggerEnabled: true
    defaultJudge: "NetflixACAJudge-v1.0"
    stagesEnabled: true
    templatesEnabled: true
    showAllConfigsEnabled: true
  spinnaker:
    extensibility:
      plugins: {}
      repositories: {}
  webhook:
    trust:
      enabled: false
  stats:
    enabled: true
    endpoint: "https://stats.spinnaker.io"
    instanceId: "01EKYADM081RQT4KAZKBPKMZK7"
    deploymentMethod: {}
    connectionTimeoutMillis: 3000
    readTimeoutMillis: 5000
